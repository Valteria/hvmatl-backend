{"ast":null,"code":"import axios from 'axios';\nimport * as actionType from '../actionType'; //Auth dispatch\n\nexport const authenticate = (dispatch, credentials) => axios.post('https://hvmatl-backend.herokuapp.com/authentication', credentials).then(res => dispatch({\n  type: actionType.AUTH,\n  token: res.data.token\n}));\nexport const restoreToken = (dispatch, token) => dispatch({\n  type: actionType.AUTH,\n  token: token\n}); //Get WeeklyNews\n\nexport const getWeeklyNews = (dispatch, from, to, token) => axios.get('https://hvmatl-backend.herokuapp.com/weeklyNews', {\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  params: {\n    from: from,\n    to: to\n  }\n}).then(res => dispatch({\n  type: actionType.GET_WEEKLY_NEWS,\n  data: res.data\n})); //Get Carousel Slides\n\nexport const getSlides = (dispatch, date, token) => axios.get('https://hvmatl-backend.herokuapp.com/carousel', {\n  headers: {\n    'Authorization': `Bearer ${token}`\n  },\n  params: {\n    date: date\n  }\n}).then(res => dispatch({\n  type: actionType.GET_SLIDES,\n  data: res.data\n}));\nexport const submitForm = (dispatch, formType, formData, token, callback) => axios.post('http://hvmatl-backend.herokuapp.com/allSoulsFeast', formData, {\n  headers: {\n    'Authorization': `Bearer ${token}`\n  }\n}).then(res => {\n  updateForm(dispatch, formType, {\n    memberId: \"\",\n    requestor: \"\",\n    email: \"\",\n    soulName: \"\"\n  });\n  callback({\n    header: \"Success\",\n    message: \"Form submitted!!\"\n  });\n}).catch(res => {\n  updateForm(dispatch, formType, {\n    memberId: \"\",\n    requestor: \"\",\n    email: \"\",\n    soulName: \"\"\n  });\n  callback({\n    header: \"Failed\",\n    message: \"Failed to submit!!\"\n  });\n});\nexport const updateForm = (dispatch, formType, updateData) => dispatch({\n  type: actionType.UPDATE_FORM_DATA,\n  formType: formType,\n  updateData: updateData\n});","map":{"version":3,"sources":["C:/Users/Hieu Dinh/Documents/hvmatl-backend/src/Hvmatl.Web/WebApp/src/store/dispatch/dispatch.js"],"names":["axios","actionType","authenticate","dispatch","credentials","post","then","res","type","AUTH","token","data","restoreToken","getWeeklyNews","from","to","get","headers","params","GET_WEEKLY_NEWS","getSlides","date","GET_SLIDES","submitForm","formType","formData","callback","updateForm","memberId","requestor","email","soulName","header","message","catch","updateData","UPDATE_FORM_DATA"],"mappings":"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","sourcesContent":["import axios from 'axios';\r\nimport * as actionType from '../actionType';\r\n\r\n//Auth dispatch\r\nexport const authenticate = (dispatch, credentials) => axios.post('https://hvmatl-backend.herokuapp.com/authentication', credentials)\r\n    .then(res => dispatch({type: actionType.AUTH, token: res.data.token}));\r\n\r\nexport const restoreToken = (dispatch, token) => dispatch({type: actionType.AUTH, token: token})\r\n//Get WeeklyNews\r\nexport const getWeeklyNews = (dispatch, from, to, token) => axios.get('https://hvmatl-backend.herokuapp.com/weeklyNews', {\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        params:{\r\n            from: from,\r\n            to: to\r\n        }\r\n    }).then(res => dispatch({type: actionType.GET_WEEKLY_NEWS, data: res.data}));\r\n\r\n//Get Carousel Slides\r\nexport const getSlides = (dispatch, date, token) => axios.get('https://hvmatl-backend.herokuapp.com/carousel', {\r\n        headers: {\r\n            'Authorization': `Bearer ${token}`\r\n        },\r\n        params:{\r\n            date: date\r\n        }\r\n    }).then(res => dispatch({type:actionType.GET_SLIDES, data: res.data}));\r\n\r\nexport const submitForm = (dispatch, formType, formData, token, callback) => axios.post('http://hvmatl-backend.herokuapp.com/allSoulsFeast', formData,{\r\n    headers: {\r\n        'Authorization': `Bearer ${token}`\r\n    }\r\n}).then(res => {\r\n    updateForm(dispatch, formType, {\r\n        memberId: \"\",\r\n        requestor:\"\",\r\n        email:\"\",\r\n        soulName: \"\"\r\n    });\r\n    callback({\r\n        header: \"Success\",\r\n        message: \"Form submitted!!\"\r\n    })\r\n}).catch(res => {\r\n    updateForm(dispatch, formType, {\r\n        memberId: \"\",\r\n        requestor:\"\",\r\n        email:\"\",\r\n        soulName: \"\"\r\n    });\r\n    callback({\r\n        header: \"Failed\",\r\n        message: \"Failed to submit!!\"\r\n    })\r\n});\r\n\r\nexport const updateForm = (dispatch, formType, updateData) => dispatch({type: actionType.UPDATE_FORM_DATA, formType: formType, updateData: updateData});\r\n"]},"metadata":{},"sourceType":"module"}